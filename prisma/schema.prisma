// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(100)
  password  String
  name      String
  token     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("users")
}

model Hero {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  translations HeroTranslation[]
  images       HeroImage[]

  @@map("heroes")
}

model HeroImage {
  id  Int    @id @default(autoincrement())
  url String

  hero_id Int
  hero    Hero @relation(fields: [hero_id], references: [id], onDelete: Cascade)

  @@map("hero_images")
}

model HeroTranslation {
  id            Int      @id @default(autoincrement())
  hero_id       Int
  language_code String   @db.VarChar(5)
  title         String
  description   String   @db.Text
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  hero Hero @relation(fields: [hero_id], references: [id], onDelete: Cascade)

  @@unique([hero_id, language_code])
  @@map("hero_translations")
}

model Quote {
  id         Int      @id @default(autoincrement())
  quotes     String   @db.Text
  author     String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("quotes")
}

model Testimony {
  id         Int      @id @default(autoincrement())
  testimony  String   @db.Text
  author     String?
  is_shown   Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  trip_id Int?
  trip    Trip? @relation(fields: [trip_id], references: [id], onDelete: SetNull)

  @@map("testimonies")
}

model Trip {
  id           Int     @id @default(autoincrement())
  latitude     String?
  longitude    String?
  price        Float?
  discount     Int?
  book_url     String?
  is_active    Boolean @default(true)
  is_highlight Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translations TripTranslation[]
  images       TripImage[]
  facilities   TripFacility[]
  itinerary    TripItineraryItem[]
  terms        TripTerm[]
  testimonies  Testimony[]

  @@map("trips")
}

model TripTranslation {
  id            Int    @id @default(autoincrement())
  language_code String
  title         String
  description   String @db.Text
  location      String

  trip_id Int
  trip    Trip @relation(fields: [trip_id], references: [id], onDelete: Cascade)

  @@unique([trip_id, language_code])
  @@map("trip_translations")
}

model TripImage {
  id  Int    @id @default(autoincrement())
  url String

  trip_id Int
  trip    Trip @relation(fields: [trip_id], references: [id], onDelete: Cascade)

  @@map("trip_images")
}

model TripFacility {
  id      Int  @id @default(autoincrement())
  trip_id Int
  trip    Trip @relation(fields: [trip_id], references: [id], onDelete: Cascade)

  translations TripFacilityTranslation[]

  @@map("trip_facilities")
}

model TripFacilityTranslation {
  id            Int    @id @default(autoincrement())
  language_code String
  name          String

  facility_id Int
  facility    TripFacility @relation(fields: [facility_id], references: [id], onDelete: Cascade)

  @@unique([facility_id, language_code])
  @@map("trip_facility_translations")
}

model TripItineraryItem {
  id   Int     @id @default(autoincrement())
  time String? // Waktu tidak perlu terjemahan

  trip_id Int
  trip    Trip @relation(fields: [trip_id], references: [id], onDelete: Cascade)

  translations TripItineraryItemTranslation[]

  @@map("trip_itinerary_items")
}

model TripItineraryItemTranslation {
  id            Int    @id @default(autoincrement())
  language_code String
  activity      String // Deskripsi aktivitas dalam bahasa tertentu

  itinerary_item_id Int
  itinerary_item    TripItineraryItem @relation(fields: [itinerary_item_id], references: [id], onDelete: Cascade)

  @@unique([itinerary_item_id, language_code])
  @@map("trip_itinerary_item_translations")
}

model TripTerm {
  id      Int  @id @default(autoincrement())
  trip_id Int
  trip    Trip @relation(fields: [trip_id], references: [id], onDelete: Cascade)

  translations TripTermTranslation[]

  @@map("trip_terms")
}

model TripTermTranslation {
  id            Int    @id @default(autoincrement())
  language_code String
  description   String // Deskripsi syarat dalam bahasa tertentu

  term_id Int
  term    TripTerm @relation(fields: [term_id], references: [id], onDelete: Cascade)

  @@unique([term_id, language_code])
  @@map("trip_term_translations")
}

model CompanyProfile {
  id           Int     @id @default(autoincrement())
  company_name String
  address      String?
  phone        String?
  email        String?
  latitude     String?
  longitude    String?

  facebook_url  String?
  instagram_url String?
  tiktok_url    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  translations CompanyProfileTranslation[]
  images       CompanyImage[]

  @@map("company_profiles")
}

model CompanyProfileTranslation {
  id            Int     @id @default(autoincrement())
  language_code String
  philosophy    String? @db.Text
  values        String? @db.Text
  background    String? @db.Text
  vision        String? @db.Text
  mission       String? @db.Text

  // Foreign Key ke CompanyProfile
  profile_id Int
  profile    CompanyProfile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@unique([profile_id, language_code])
  @@map("company_profile_translations")
}

model CompanyImage {
  id  Int    @id @default(autoincrement())
  url String

  profile_id Int
  profile    CompanyProfile @relation(fields: [profile_id], references: [id], onDelete: Cascade)

  @@map("company_images")
}

model TeamMember {
  id            Int     @id @default(autoincrement())
  name          String
  role          String?
  photo_url     String?
  facebook_url  String?
  instagram_url String?
  tiktok_url    String?
  linkedin_url  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("team_members")
}
